<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txt_cmd_help_help_cmd_sum" xml:space="preserve">
    <value>Displays a detailed explaination of the given command</value>
  </data>
  <data name="txt_cmd_help_help_mod_sum" xml:space="preserve">
    <value>This provides a filtered list of commands. You will only see what you can use.</value>
  </data>
  <data name="txt_cmd_help_help_rem" xml:space="preserve">
    <value>This provides a filtered list of commands. You will only see what you can use.</value>
  </data>
  <data name="txt_cmd_help_help_sum" xml:space="preserve">
    <value>Displays every command that you can use</value>
  </data>
  <data name="txt_mod_admset_cmd_setadminrole_sum" xml:space="preserve">
    <value>Sets a role that enables any member of it to use the admin commands.</value>
  </data>
  <data name="txt_mod_admset_cmd_setlang_sum" xml:space="preserve">
    <value>Sets the language the bot speaks.</value>
  </data>
  <data name="txt_mod_adm_cmd_exit_sum" xml:space="preserve">
    <value>Stops the bot.</value>
  </data>
  <data name="txt_mod_adm_name" xml:space="preserve">
    <value>Admin Commands</value>
  </data>
  <data name="txt_mod_adm_sum" xml:space="preserve">
    <value>Provides administrative commands.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_add-group_sum" xml:space="preserve">
    <value>adds a group to an event template.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_create_sum" xml:space="preserve">
    <value>Creates an event template that can be used to create individual events.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_deletegrp_rem" xml:space="preserve">
    <value>Deleting a group from an event template does not affect already created events</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_deletegrp_sum" xml:space="preserve">
    <value>deletes a group from an event template</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_delete_rem" xml:space="preserve">
    <value>This does not delete any events that were created using this template. You need to delete them manually.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_delete_sum" xml:space="preserve">
    <value>Deletes a template</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_list_sum" xml:space="preserve">
    <value>Lists every template in this guild</value>
  </data>
  <data name="txt_mod_event_cmd_add-group_sum" xml:space="preserve">
    <value>adds a group to an event</value>
  </data>
  <data name="txt_mod_event_cmd_createftpl_sum" xml:space="preserve">
    <value>Creates an event using a template. Every values, except for the start date are pulled from the predefined template.</value>
  </data>
  <data name="txt_mod_event_cmd_create_sum" xml:space="preserve">
    <value>creates an event within this server</value>
  </data>
  <data name="txt_mod_event_cmd_delete_sum" xml:space="preserve">
    <value>deletes the given event</value>
  </data>
  <data name="txt_mod_event_cmd_join-group_sum" xml:space="preserve">
    <value>joins the given event within the given group</value>
  </data>
  <data name="txt_mod_event_cmd_join_sum" xml:space="preserve">
    <value>joins the given event</value>
  </data>
  <data name="txt_mod_event_cmd_leave-group_sum" xml:space="preserve">
    <value>leaves the given event group</value>
  </data>
  <data name="txt_mod_event_cmd_leave_sum" xml:space="preserve">
    <value>leaves the given event</value>
  </data>
  <data name="txt_mod_event_cmd_show-next_sum" xml:space="preserve">
    <value>shows the next X events</value>
  </data>
  <data name="txt_mod_event_cmd_show_sum" xml:space="preserve">
    <value>View details about the given event</value>
  </data>
  <data name="txt_mod_event_name" xml:space="preserve">
    <value>Event Commands</value>
  </data>
  <data name="txt_mod_event_sum" xml:space="preserve">
    <value>provides commands for managing guild events</value>
  </data>
  <data name="txt_mod_help_name" xml:space="preserve">
    <value>Help Commands</value>
  </data>
  <data name="txt_mod_misc_cmd_why_rem" xml:space="preserve">
    <value>If you reply to a message of a failed command and use this command, you will get the reason why the command from this message failed.</value>
  </data>
  <data name="txt_mod_misc_cmd_why_sum" xml:space="preserve">
    <value>Get the reason why your last command failed</value>
  </data>
  <data name="txt_mod_misc_name" xml:space="preserve">
    <value>Miscellaneous commands</value>
  </data>
  <data name="txt_mod_misc_sum" xml:space="preserve">
    <value>Commands that do not fit in any other category</value>
  </data>
  <data name="txt_msg_alreadyoined" xml:space="preserve">
    <value>You already joined!</value>
  </data>
  <data name="txt_msg_cmdoverview_desc" xml:space="preserve">
    <value>Here is a list of commands that the bot understands. You may want more details on specific commands. Use `help *command*`</value>
  </data>
  <data name="txt_msg_cmdoverview_title" xml:space="preserve">
    <value>Bot command reference</value>
  </data>
  <data name="txt_msg_eventcreated" xml:space="preserve">
    <value>Event succesfully created. See below for details.</value>
  </data>
  <data name="txt_msg_eventgroupnotfound" xml:space="preserve">
    <value>This event group cannot be found.</value>
  </data>
  <data name="txt_msg_eventlist_footer" xml:space="preserve">
    <value>To view more details about an event type `event show [id]`</value>
  </data>
  <data name="txt_msg_eventlist_title" xml:space="preserve">
    <value>Upcomming events</value>
  </data>
  <data name="txt_msg_eventnotfound" xml:space="preserve">
    <value>Event not found</value>
  </data>
  <data name="txt_msg_groupfull" xml:space="preserve">
    <value>This group is already full. Please join another group.</value>
  </data>
  <data name="txt_msg_groupsfull" xml:space="preserve">
    <value>You can't add more than 11 groups to an event.</value>
  </data>
  <data name="txt_msg_nosummary" xml:space="preserve">
    <value>No summary :(</value>
  </data>
  <data name="txt_msg_notjoined" xml:space="preserve">
    <value>You can't leave an event you are not attending.</value>
  </data>
  <data name="txt_msg_ok" xml:space="preserve">
    <value>OK!</value>
  </data>
  <data name="txt_msg_templateexists" xml:space="preserve">
    <value>This template already exists. You can modify it using the `event template update` command.</value>
  </data>
  <data name="txt_msg_wrong_channel" xml:space="preserve">
    <value>Shhh! I am not allowed to speak in this channel and you should not message me using this channel. I've deleted your message before anyone notices.</value>
  </data>
  <data name="txt_word_alias" xml:space="preserve">
    <value>Alias</value>
  </data>
  <data name="txt_word_attendee" xml:space="preserve">
    <value>Attendee</value>
  </data>
  <data name="txt_word_duration" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="txt_word_endtime" xml:space="preserve">
    <value>End time</value>
  </data>
  <data name="txt_word_none" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="txt_word_starttime" xml:space="preserve">
    <value>Start time</value>
  </data>
  <data name="txt_word_subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="txt__word_remarks" xml:space="preserve">
    <value>Remarks</value>
  </data>
</root>