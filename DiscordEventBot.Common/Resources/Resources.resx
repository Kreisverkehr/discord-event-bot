<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txt_cmd_help_help_cmd_sum" xml:space="preserve">
    <value>Displays a detailed explaination of the given command</value>
  </data>
  <data name="txt_cmd_help_help_mod_sum" xml:space="preserve">
    <value>This provides a filtered list of commands. You will only see what you can use.</value>
  </data>
  <data name="txt_cmd_help_help_rem" xml:space="preserve">
    <value>This provides a filtered list of commands. You will only see what you can use.</value>
  </data>
  <data name="txt_cmd_help_help_sum" xml:space="preserve">
    <value>Displays every command that you can use</value>
  </data>
  <data name="txt_mod_admset_cmd_setadminrole_param_role_sum" xml:space="preserve">
    <value>The role that should be given access to certain commands.</value>
  </data>
  <data name="txt_mod_admset_cmd_setadminrole_sum" xml:space="preserve">
    <value>Sets a role that enables any member of it to use the admin commands.</value>
  </data>
  <data name="txt_mod_admset_cmd_setbc_param_channel_sum" xml:space="preserve">
    <value>The channel in wich the bot reacts to commands.</value>
  </data>
  <data name="txt_mod_admset_cmd_setlang_param_lang_sum" xml:space="preserve">
    <value>The language the bot should speak. E.g. "de" or "en"</value>
  </data>
  <data name="txt_mod_admset_cmd_setlang_sum" xml:space="preserve">
    <value>Sets the language the bot speaks.</value>
  </data>
  <data name="txt_mod_admset_cmd_setprefix_param_prefix_sum" xml:space="preserve">
    <value>The prefix the bot should react to in addition to a mention</value>
  </data>
  <data name="txt_mod_admset_cmd_setprefix_sum" xml:space="preserve">
    <value>set a custom command prefix for this guild</value>
  </data>
  <data name="txt_mod_adm_cmd_exit_param_delay_sum" xml:space="preserve">
    <value>Delay time before the bot initialtes the shutdown.</value>
  </data>
  <data name="txt_mod_adm_cmd_exit_sum" xml:space="preserve">
    <value>Stops the bot.</value>
  </data>
  <data name="txt_mod_adm_name" xml:space="preserve">
    <value>Admin Commands</value>
  </data>
  <data name="txt_mod_adm_sum" xml:space="preserve">
    <value>Provides administrative commands.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_add-group_sum" xml:space="preserve">
    <value>adds a group to an event template.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_addgroup_param_capacity_sum" xml:space="preserve">
    <value>The maximum capacity of the group</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_addgroup_param_groupname_sum" xml:space="preserve">
    <value>Name of the group you want to add.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_addgroup_param_template_sum" xml:space="preserve">
    <value>The id or name of the template you want to add a group to.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_create_param_description_sum" xml:space="preserve">
    <value>Description of the event that this template creates.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_create_param_duration_sum" xml:space="preserve">
    <value>Duration of the event that this template creates.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_create_param_name_sum" xml:space="preserve">
    <value>The name of the template you want to create. This cannot be changed after the creation. Choose a name that is easy to remember and easy to type.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_create_param_subject_sum" xml:space="preserve">
    <value>Title of the event that this template creates.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_create_sum" xml:space="preserve">
    <value>Creates an event template that can be used to create individual events.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_deletegrp_param_groupindex_sum" xml:space="preserve">
    <value>The index of the group you want to delete. This index is 1-based. To delete the first group secify 1. To delete the second group specify 2 and so on.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_deletegrp_param_template_sum" xml:space="preserve">
    <value>The id or name of the template you want to delete a group from.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_deletegrp_rem" xml:space="preserve">
    <value>Deleting a group from an event template does not affect already created events</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_deletegrp_sum" xml:space="preserve">
    <value>deletes a group from an event template</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_delete_param_template_sum" xml:space="preserve">
    <value>The id or name of the template you want to delete.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_delete_rem" xml:space="preserve">
    <value>This does not delete any events that were created using this template. You need to delete them manually.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_delete_sum" xml:space="preserve">
    <value>Deletes a template</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_list_sum" xml:space="preserve">
    <value>Lists every template in this guild</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_update_param_description_sum" xml:space="preserve">
    <value>The new description. Leave empty if you don't want to change it.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_update_param_duration_sum" xml:space="preserve">
    <value>The new duration of the event. E.g. 2h30m30s for 2 hours, 30 minutes and 30 seconds. You can leave out any component that you don't need. If your event is only 30 minutes you can write "30m". specify "null" if you don't want to change it.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_update_param_subject_sum" xml:space="preserve">
    <value>The new title. Leave empty if you don't want to change it.</value>
  </data>
  <data name="txt_mod_eventtpl_cmd_update_param_template_sum" xml:space="preserve">
    <value>The id or name of the template you want to change.</value>
  </data>
  <data name="txt_mod_event_cmd_add-group_sum" xml:space="preserve">
    <value>adds a group to an event</value>
  </data>
  <data name="txt_mod_event_cmd_addgroup_param_capacity_sum" xml:space="preserve">
    <value>Capacity of the new group. Limits the number of attendees in this group when set.</value>
  </data>
  <data name="txt_mod_event_cmd_addgroup_param_eventid_sum" xml:space="preserve">
    <value>The id of the event to wich the group should be added</value>
  </data>
  <data name="txt_mod_event_cmd_addgroup_param_groupname_sum" xml:space="preserve">
    <value>Name of the new group</value>
  </data>
  <data name="txt_mod_event_cmd_createftpl_param_startdate_sum" xml:space="preserve">
    <value>The duration of the event. E.g. 2h30m30s for 2 hours, 30 minutes and 30 seconds. You can leave out any component that you don't need. If your event is only 30 minutes you can write "30m"</value>
  </data>
  <data name="txt_mod_event_cmd_createftpl_param_template_sum" xml:space="preserve">
    <value>The id or name of the template you want to create your event from.</value>
  </data>
  <data name="txt_mod_event_cmd_createftpl_sum" xml:space="preserve">
    <value>Creates an event using a template. Every values, except for the start date are pulled from the predefined template.</value>
  </data>
  <data name="txt_mod_event_cmd_create_param_description_sum" xml:space="preserve">
    <value>a long and detailed description of your event. This can be as long as you want.</value>
  </data>
  <data name="txt_mod_event_cmd_create_param_duration_sum" xml:space="preserve">
    <value>The duration of the event. E.g. 2h30m30s for 2 hours, 30 minutes and 30 seconds. You can leave out any component that you don't need. If your event is only 30 minutes you can write "30m"</value>
  </data>
  <data name="txt_mod_event_cmd_create_param_startdate_sum" xml:space="preserve">
    <value>Start date and time of the event.E.g. "1.1.2020 13:00" for 1st January of 2020 at 1 PM</value>
  </data>
  <data name="txt_mod_event_cmd_create_param_subject_sum" xml:space="preserve">
    <value>Title of the event.</value>
  </data>
  <data name="txt_mod_event_cmd_create_sum" xml:space="preserve">
    <value>creates an event within this server</value>
  </data>
  <data name="txt_mod_event_cmd_delete_param_eventid_sum" xml:space="preserve">
    <value>The id of the event you want to delete</value>
  </data>
  <data name="txt_mod_event_cmd_delete_sum" xml:space="preserve">
    <value>deletes the given event</value>
  </data>
  <data name="txt_mod_event_cmd_join-group_sum" xml:space="preserve">
    <value>joins the given event within the given group</value>
  </data>
  <data name="txt_mod_event_cmd_joingroup_param_eventid_sum" xml:space="preserve">
    <value>The id of the event you want to join</value>
  </data>
  <data name="txt_mod_event_cmd_joingroup_param_groupname_sum" xml:space="preserve">
    <value>Name of the group you want to join</value>
  </data>
  <data name="txt_mod_event_cmd_joingroup_param_user_sum" xml:space="preserve">
    <value>The user you want to join the event. You can either mention it or write it's user- or nickname.</value>
  </data>
  <data name="txt_mod_event_cmd_join_param_eventid_sum" xml:space="preserve">
    <value>The id of the event you want to join</value>
  </data>
  <data name="txt_mod_event_cmd_join_param_user_sum" xml:space="preserve">
    <value>The user you want to join the event. You can either mention it or write it's user- or nickname.</value>
  </data>
  <data name="txt_mod_event_cmd_join_sum" xml:space="preserve">
    <value>joins the given event</value>
  </data>
  <data name="txt_mod_event_cmd_leave-group_sum" xml:space="preserve">
    <value>leaves the given event group</value>
  </data>
  <data name="txt_mod_event_cmd_leavegroup_param_eventid_sum" xml:space="preserve">
    <value>The id of the event you want to leave</value>
  </data>
  <data name="txt_mod_event_cmd_leavegroup_param_groupname_sum" xml:space="preserve">
    <value>The name of the group you want to leave</value>
  </data>
  <data name="txt_mod_event_cmd_leavegroup_param_user_sum" xml:space="preserve">
    <value>The user you want to leave the event. You can either mention it or write it's user- or nickname.</value>
  </data>
  <data name="txt_mod_event_cmd_leave_param_eventid_sum" xml:space="preserve">
    <value>The id of the event you want to leave</value>
  </data>
  <data name="txt_mod_event_cmd_leave_param_user_sum" xml:space="preserve">
    <value>The user you want to leave the event. You can either mention it or write it's user- or nickname.</value>
  </data>
  <data name="txt_mod_event_cmd_leave_sum" xml:space="preserve">
    <value>leaves the given event</value>
  </data>
  <data name="txt_mod_event_cmd_show-next_sum" xml:space="preserve">
    <value>shows the next X events</value>
  </data>
  <data name="txt_mod_event_cmd_shownext_param_count_sum" xml:space="preserve">
    <value>The number of events you want to list. Default is 10.</value>
  </data>
  <data name="txt_mod_event_cmd_show_param_eventid_sum" xml:space="preserve">
    <value>The id of the event you want to view</value>
  </data>
  <data name="txt_mod_event_cmd_show_sum" xml:space="preserve">
    <value>View details about the given event</value>
  </data>
  <data name="txt_mod_event_name" xml:space="preserve">
    <value>Event Commands</value>
  </data>
  <data name="txt_mod_event_sum" xml:space="preserve">
    <value>provides commands for managing guild events</value>
  </data>
  <data name="txt_mod_help_cmd_help_param_command_sum" xml:space="preserve">
    <value>The name of the command you want to view.</value>
  </data>
  <data name="txt_mod_help_cmd_help_param_module_sum" xml:space="preserve">
    <value>The name of the module you want to view.</value>
  </data>
  <data name="txt_mod_help_name" xml:space="preserve">
    <value>Help Commands</value>
  </data>
  <data name="txt_mod_misc_cmd_why_rem" xml:space="preserve">
    <value>If you reply to a message of a failed command and use this command, you will get the reason why the command from this message failed.</value>
  </data>
  <data name="txt_mod_misc_cmd_why_sum" xml:space="preserve">
    <value>Get the reason why your last command failed</value>
  </data>
  <data name="txt_mod_misc_name" xml:space="preserve">
    <value>Miscellaneous commands</value>
  </data>
  <data name="txt_mod_misc_sum" xml:space="preserve">
    <value>Commands that do not fit in any other category</value>
  </data>
  <data name="txt_msg_alreadyoined" xml:space="preserve">
    <value>You already joined!</value>
  </data>
  <data name="txt_msg_cmdoverview_desc" xml:space="preserve">
    <value>Here is a list of commands that the bot understands. You may want more details on specific commands. Use `help *command*`</value>
  </data>
  <data name="txt_msg_cmdoverview_title" xml:space="preserve">
    <value>Bot command reference</value>
  </data>
  <data name="txt_msg_eventcreated" xml:space="preserve">
    <value>Event succesfully created. See below for details.</value>
  </data>
  <data name="txt_msg_eventgroupnotfound" xml:space="preserve">
    <value>This event group cannot be found.</value>
  </data>
  <data name="txt_msg_eventlist_footer" xml:space="preserve">
    <value>To view more details about an event type `event show [id]`</value>
  </data>
  <data name="txt_msg_eventlist_title" xml:space="preserve">
    <value>Upcomming events</value>
  </data>
  <data name="txt_msg_eventnotfound" xml:space="preserve">
    <value>Event not found</value>
  </data>
  <data name="txt_msg_groupfull" xml:space="preserve">
    <value>This group is already full. Please join another group.</value>
  </data>
  <data name="txt_msg_groupsfull" xml:space="preserve">
    <value>You can't add more than 11 groups to an event.</value>
  </data>
  <data name="txt_msg_nosummary" xml:space="preserve">
    <value>No summary :(</value>
  </data>
  <data name="txt_msg_notjoined" xml:space="preserve">
    <value>You can't leave an event you are not attending.</value>
  </data>
  <data name="txt_msg_ok" xml:space="preserve">
    <value>OK!</value>
  </data>
  <data name="txt_msg_templateexists" xml:space="preserve">
    <value>This template already exists. You can modify it using the `event template update` command.</value>
  </data>
  <data name="txt_msg_wrong_channel" xml:space="preserve">
    <value>Shhh! I am not allowed to speak in this channel and you should not message me using this channel. I've deleted your message before anyone notices.</value>
  </data>
  <data name="txt_phrase_isoptional" xml:space="preserve">
    <value>Is optional?</value>
  </data>
  <data name="txt_word_alias" xml:space="preserve">
    <value>Alias</value>
  </data>
  <data name="txt_word_attendee" xml:space="preserve">
    <value>Attendee</value>
  </data>
  <data name="txt_word_datatype" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="txt_word_duration" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="txt_word_endtime" xml:space="preserve">
    <value>End time</value>
  </data>
  <data name="txt_word_name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="txt_word_no" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="txt_word_none" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="txt_word_parameters" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="txt_word_starttime" xml:space="preserve">
    <value>Start time</value>
  </data>
  <data name="txt_word_subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="txt_word_yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="txt__word_remarks" xml:space="preserve">
    <value>Remarks</value>
  </data>
</root>