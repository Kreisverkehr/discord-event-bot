// <auto-generated />
using System;
using DiscordEventBot.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiscordEventBot.Model.Migrations
{
    [DbContext(typeof(EventBotContext))]
    partial class EventBotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("DiscordEventBot.Model.Attendee", b =>
                {
                    b.Property<Guid>("AttendeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AttendeeGroupGroupID")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscordUserDiscriminator")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("DiscordUserID")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("EventID")
                        .HasColumnType("TEXT");

                    b.HasKey("AttendeeID");

                    b.HasIndex("AttendeeGroupGroupID");

                    b.HasIndex("EventID");

                    b.ToTable("Attendee");
                });

            modelBuilder.Entity("DiscordEventBot.Model.AttendeeGroup", b =>
                {
                    b.Property<Guid>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupID");

                    b.HasIndex("EventID");

                    b.ToTable("AttendeeGroup");
                });

            modelBuilder.Entity("DiscordEventBot.Model.Event", b =>
                {
                    b.Property<Guid>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.HasKey("EventID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DiscordEventBot.Model.Attendee", b =>
                {
                    b.HasOne("DiscordEventBot.Model.AttendeeGroup", null)
                        .WithMany("Attendees")
                        .HasForeignKey("AttendeeGroupGroupID");

                    b.HasOne("DiscordEventBot.Model.Event", null)
                        .WithMany("Attendees")
                        .HasForeignKey("EventID");
                });

            modelBuilder.Entity("DiscordEventBot.Model.AttendeeGroup", b =>
                {
                    b.HasOne("DiscordEventBot.Model.Event", null)
                        .WithMany("Groups")
                        .HasForeignKey("EventID");
                });

            modelBuilder.Entity("DiscordEventBot.Model.AttendeeGroup", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("DiscordEventBot.Model.Event", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
